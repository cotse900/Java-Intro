/**********************************************
 Workshop 9
 Course: JAC444 - Semester 4
 Last Name: Tse
 First Name: Chungon
 ID: 154928188
 Section: NAA
 This assignment represents my own work in accordance with Seneca Academic Policy.
 CHUNGON
 Date: 5 April 2023
 **********************************************/

Reference:
https://www.baeldung.com/cs/levenshtein-distance-computation
https://www.baeldung.com/java-levenshtein-distance

The instructions prompted me to look for a Levenshtein implementation. So, I went through https://www.baeldung.com/java-levenshtein-distance and I thought it was more tactful to use the dynamic programming approach. However, I got confused by counting the edit distance.

static int calculate(String x, String y) {
    int[][] dp = new int[x.length() + 1][y.length() + 1];

    for (int i = 0; i <= x.length(); i++) {
        for (int j = 0; j <= y.length(); j++) {
            if (i == 0) {
                dp[i][j] = j;
            }
            else if (j == 0) {
                dp[i][j] = i;
            }
            else {
                dp[i][j] = min(dp[i - 1][j - 1] 
                 + costOfSubstitution(x.charAt(i - 1), y.charAt(j - 1)), 
                  dp[i - 1][j] + 1, 
                  dp[i][j - 1] + 1);
            }
        }
    }

    return dp[x.length()][y.length()];
}

Using calculate(), it returns the minimal number of operations required to change the words, so it can skip some intermediate words between starting and ending words. calculate() returns 3 for dog, dot, cot, cat but also 3 for dog, dot, cot, cat, rat, rut. What it means is dog->dot->rot-rut but it does not work this way because there is not rot or any replacement word in test.txt.

The sample output is:

Let's find an edit distance between words.
  first word (enter to quit)? dog
  second word? cat
dog, dot, cot, cat
Edit distance = 3

Let's find an edit distance between words.
  first word (enter to quit)? dog
  second word? rut
dog, dot, cot, cat, rat, rut
Edit distance = 5

If we count ALL intermediate words, then dog, dot, cot, cat, rat, rut has an edit distance of 5, and they are all in test.txt. For this reason, I have no use of Levenshtein but instead just count and display intermediate words.

This does not suggest Levenshtein is useless, but it counts minimal steps from word A to word B WITHOUT using a word file. Both approaches are correct but for different purposes.
